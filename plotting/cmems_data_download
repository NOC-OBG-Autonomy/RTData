import os
import copernicusmarine as cpm
from pathlib import Path
import ast
from datetime import datetime, timedelta
import json
import statistics
import numpy as np

from rtdata import config
from rtdata.c2_api import api_interface as c2
from rtdata.satellite_utils import cmems_download_utils as CMEM_dl_util

## Date and time setup

# Format time as YYYY-MM-DD"T"HH:MM:SS for Copernicus Marine Module
current_day = datetime.now()
end_timelabel = current_day.strftime("%Y%m%d")
end_time    = current_day.strftime("%Y-%m-%dT%H:%M:%S")
start_time  = current_day - timedelta(days=4)
start_timelabel = start_time.strftime("%Y%m%d")
start_time  = start_time.strftime("%Y-%m-%dT%H:%M:%S")

## Location and depths for spatial bounds on data download

list_lon = []
list_lat = []

for unit in config.gliders_units:

    #Get the last position of the glider
    pos = c2.get_positions(config.token, "slocum", unit, test = False)
    lat, lon = c2.get_last_coordinates(pos)
    list_lon.append(lon)
    list_lat.append(lat)

min_lon, max_lon, min_lat, max_lat = CMEM_dl_util.square_bounds(statistics.mean(list_lat),statistics.mean(list_lon))

min_depth = 0
max_depth = 1000

## List of datasets to extract

datasets_to_extract = [
    'cmems_obs-mob_glo_phy-cur_nrt_0.25deg_P1D-m',     # currents   (low res, high scope)
    'cmems_mod_glo_phy-cur_anfc_0.083deg_P1D-m']       # currents   (modelled product)

filenames = []

## Download each dataset

for dataset_to_extract in datasets_to_extract:
    # Dynamically set the output filename based on the dataset name
    if "_mod_" in dataset_to_extract:
        saved_netCDF_as = f"{start_timelabel}_{end_timelabel}_model_currents.nc"
        filepath = os.path.join(config.save_path, saved_netCDF_as)
    if "_obs-" in dataset_to_extract:
        saved_netCDF_as = f"{start_timelabel}_{end_timelabel}_observed_currents.nc"
        filepath = os.path.join(config.save_path, saved_netCDF_as)

    # Remove existing file if it exists to allow overwriting
    if os.path.exists(filepath):
        os.remove(filepath)

    # Perform the data subset operation
    cpm.subset(
        dataset_id=dataset_to_extract,
        minimum_longitude=min_lon,
        maximum_longitude=max_lon,
        minimum_latitude=min_lat,
        maximum_latitude=max_lat,
        start_datetime=start_time,
        end_datetime=end_time,
        minimum_depth=min_depth,
        maximum_depth=max_depth,
        output_filename=saved_netCDF_as,
        output_directory=config.save_path
    )

    filenames.append(saved_netCDF_as)

## Save to json file

CMEM_dl_util.save_filenames_to_json(filenames, os.path.join(config.save_path, 'filenames.json'))